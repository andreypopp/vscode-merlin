// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var $$Node = require("./bindings/Node.bs.js");
var Path = require("path");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Utils = require("./Utils.bs.js");
var Semver = require("semver");
var Vscode = require("vscode");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var $$Request = require("request");
var Bindings = require("./bindings/Bindings.bs.js");
var Filename = require("bs-platform/lib/js/filename.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var AzurePipelines = require("./AzurePipelines.bs.js");
var RequestProgress = require("request-progress");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function run(projectPath) {
  return Vscode.window.withProgress({
              location: 15,
              title: "Setting up toolchain..."
            }, (function (progress) {
                progress.report({
                      increment: 10
                    });
                return $$Node.ChildProcess.exec("esy", {
                              cwd: projectPath
                            }).then((function (param) {
                              console.log("Finished running esy");
                              return Promise.resolve(/* () */0);
                            }));
              }));
}

var Esy = {
  run: run
};

function run$1(param) {
  return Promise.resolve(/* () */0);
}

var Opam = {
  run: run$1
};

function download(url, file, progress, end_, error, data) {
  var stream = RequestProgress($$Request(url));
  $$Node.RequestProgress.onProgress(stream, (function (state) {
          return Curry._1(progress, state.size.transferred / (134 * 1024 * 1024));
        }));
  $$Node.RequestProgress.onData(stream, data);
  $$Node.RequestProgress.onEnd(stream, end_);
  $$Node.RequestProgress.onError(stream, error);
  stream.pipe(Fs.createWriteStream(file));
  return /* () */0;
}

function dropAnEsyJSON(compilerVersion, folder) {
  var esyJsonTargetDir = Path.join(folder, ".vscode", "esy");
  return $$Node.Fs.mkdir(true, esyJsonTargetDir).then((function (param) {
                return $$Node.Fs.writeFile(Filename.concat(esyJsonTargetDir, "esy.json"), Bindings.thisProjectsEsyJson);
              }));
}

function processDeps(dependenciesJson, folder) {
  var match = Js_json.classify(dependenciesJson);
  if (typeof match === "number" || match.tag !== /* JSONObject */2) {
    return Promise.reject([
                Caml_builtin_exceptions.failure,
                "'dependencies' section in the manifest file was expected to be dictionary, but it was not!"
              ]);
  } else {
    var match$1 = Js_dict.get(match[0], "bs-platform");
    if (match$1 !== undefined) {
      var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
      if (typeof match$2 === "number" || match$2.tag) {
        return Promise.reject([
                    Caml_builtin_exceptions.failure,
                    "'bs-platform' (in dependencies section) was expected to contain a semver string, but it was not!"
                  ]);
      } else if (Semver.satisfies(Semver.minVersion(match$2[0]), ">=6.0.0")) {
        return dropAnEsyJSON("4.6.x", folder);
      } else {
        return dropAnEsyJSON("4.2.x", folder);
      }
    } else {
      return Promise.reject([
                  Caml_builtin_exceptions.failure,
                  "'bs-platform' was expected in the 'dependencies' section of the manifest file, but was not found!"
                ]);
    }
  }
}

function run$2(projectPath) {
  var manifestPath = Path.join(projectPath, "package.json");
  var folder = Curry._1(Filename.dirname, manifestPath);
  return $$Node.Fs.readFile(manifestPath).then((function (manifest) {
                  var manifestJson = JSON.parse(manifest);
                  var match = Js_json.classify(manifestJson);
                  if (typeof match === "number" || match.tag !== /* JSONObject */2) {
                    return Promise.reject([
                                Caml_builtin_exceptions.failure,
                                "The entire manifest was expected to be dictionary of key-vals, but it was not!:"
                              ]);
                  } else {
                    var dict = match[0];
                    var match$1 = Utils.getSubDict(dict, "dependencies");
                    var match$2 = Utils.getSubDict(dict, "devDependencies");
                    if (match$1 !== undefined) {
                      var dependenciesJson = Caml_option.valFromOption(match$1);
                      if (match$2 !== undefined) {
                        return processDeps(Utils.mergeDicts(dependenciesJson, Caml_option.valFromOption(match$2)), folder);
                      } else {
                        return processDeps(dependenciesJson, folder);
                      }
                    } else if (match$2 !== undefined) {
                      return processDeps(Caml_option.valFromOption(match$2), folder);
                    } else {
                      return Promise.reject([
                                  Caml_builtin_exceptions.failure,
                                  "The manifest file doesn't seem to contain `dependencies` or `devDependencies` property"
                                ]);
                    }
                  }
                })).then((function (param) {
                return Vscode.window.withProgress({
                            location: 15,
                            title: "Setting up toolchain..."
                          }, (function (progress) {
                              progress.report({
                                    increment: 10
                                  });
                              var hiddenEsyRoot = Path.join(projectPath, ".vscode", "esy");
                              return $$Node.ChildProcess.exec("esy i -P " + hiddenEsyRoot, {
                                                    cwd: projectPath
                                                  }).then((function (param) {
                                                    progress.report({
                                                          increment: 10
                                                        });
                                                    return AzurePipelines.getBuildID(/* () */0).then(AzurePipelines.getDownloadURL).then((function (r) {
                                                                  if (r.tag) {
                                                                    return Promise.resolve(/* Error */Block.__(1, [r[0]]));
                                                                  } else {
                                                                    var downloadUrl = r[0];
                                                                    console.log("download", downloadUrl);
                                                                    var lastProgress = {
                                                                      contents: 0
                                                                    };
                                                                    return new Promise((function (resolve, param) {
                                                                                  return download(downloadUrl, Path.join(hiddenEsyRoot, "cache.zip"), (function (progressFraction) {
                                                                                                var percent = progressFraction * 80.0 | 0;
                                                                                                progress.report({
                                                                                                      increment: percent - lastProgress.contents | 0
                                                                                                    });
                                                                                                lastProgress.contents = percent;
                                                                                                return /* () */0;
                                                                                              }), (function (param) {
                                                                                                return resolve(/* Ok */Block.__(0, [/* () */0]));
                                                                                              }), (function (e) {
                                                                                                return resolve(/* Error */Block.__(1, ["Failed to download " + (String(downloadUrl) + " ")]));
                                                                                              }), (function (param) {
                                                                                                return /* () */0;
                                                                                              }));
                                                                                }));
                                                                  }
                                                                }));
                                                  })).then((function (_result) {
                                                  return $$Node.ChildProcess.exec("unzip cache.zip", {
                                                              cwd: hiddenEsyRoot
                                                            });
                                                })).then((function (param) {
                                                return $$Node.ChildProcess.exec("esy import-dependencies -P " + hiddenEsyRoot, {
                                                            cwd: hiddenEsyRoot
                                                          });
                                              })).then((function (param) {
                                              return $$Node.ChildProcess.exec("esy build -P " + hiddenEsyRoot, {
                                                          cwd: hiddenEsyRoot
                                                        });
                                            })).then((function (param) {
                                            return Promise.resolve(/* () */0);
                                          }));
                            }));
              }));
}

var Bsb = {
  download: download,
  dropAnEsyJSON: dropAnEsyJSON,
  processDeps: processDeps,
  run: run$2
};

exports.Esy = Esy;
exports.Opam = Opam;
exports.Bsb = Bsb;
/* fs Not a pure module */
