// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Esy = require("./Esy.bs.js");
var $$Node = require("./bindings/Node.bs.js");
var Path = require("path");
var Block = require("bs-platform/lib/js/block.js");
var Utils = require("./Utils.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function detect(folder) {
  return Esy.getStatus(folder).then((function (status) {
                if (status.isProject) {
                  var match = status.rootPackageConfigPath;
                  var manifestFile = (match == null) ? "" : match;
                  if (new RegExp(".json$").test(manifestFile)) {
                    if (status.isProjectReadyForDev) {
                      return Promise.resolve(/* Esy */Block.__(0, [/* readyForDev */true]));
                    } else {
                      return $$Node.Fs.readFile(manifestFile).then((function (manifest) {
                                    var manifestJson = JSON.parse(manifest);
                                    var manifestHasEsyConfig = Utils.propertyExists(manifestJson, "esy");
                                    var manifestIsEsyJSON = new RegExp("esy.json$").test(manifestFile);
                                    if (manifestIsEsyJSON || manifestHasEsyConfig) {
                                      return Promise.resolve(/* Esy */Block.__(0, [/* readyForDev */status.isProjectReadyForDev]));
                                    } else {
                                      var esyToolChainFolder = Path.join(folder, ".vscode", "esy");
                                      return $$Node.Fs.exists(esyToolChainFolder).then((function (doesToolChainEsyManifestExist) {
                                                    if (doesToolChainEsyManifestExist) {
                                                      return Esy.getStatus(esyToolChainFolder).then((function (toolChainStatus) {
                                                                    if (toolChainStatus.isProject) {
                                                                      return Promise.resolve(/* Bsb */Block.__(1, [/* readyForDev */toolChainStatus.isProjectSolved]));
                                                                    } else {
                                                                      return Promise.reject([
                                                                                  Caml_builtin_exceptions.failure,
                                                                                  "Weird invariant violation. Why would .vscode/esy exist but not be a valid esy project. TODO"
                                                                                ]);
                                                                    }
                                                                  }));
                                                    } else {
                                                      return Promise.resolve(/* Bsb */Block.__(1, [/* readyForDev */false]));
                                                    }
                                                  }));
                                    }
                                  }));
                    }
                  } else {
                    return Promise.resolve(/* Opam */0);
                  }
                } else {
                  return Promise.reject([
                              Caml_builtin_exceptions.failure,
                              "Not a valid esy/opam/bsb project"
                            ]);
                }
              }));
}

exports.detect = detect;
/* Esy Not a pure module */
