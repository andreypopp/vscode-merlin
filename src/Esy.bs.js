// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Node = require("./bindings/Node.bs.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

var UnexpectedJSONValue = Caml_exceptions.create("Esy.UnexpectedJSONValue");

var Stderr = Caml_exceptions.create("Esy.Stderr");

var UnknownError = Caml_exceptions.create("Esy.UnknownError");

var JSError = Caml_exceptions.create("Esy.JSError");

function bool$prime(x) {
  if (typeof x === "number") {
    switch (x) {
      case /* JSONFalse */0 :
          return false;
      case /* JSONTrue */1 :
          return true;
      case /* JSONNull */2 :
          throw [
                UnexpectedJSONValue,
                x
              ];
      
    }
  } else {
    throw [
          UnexpectedJSONValue,
          x
        ];
  }
}

function raiseIfNone(param) {
  if (param !== undefined) {
    return Caml_option.valFromOption(param);
  } else {
    return Pervasives.failwith("Found None where it was not expected");
  }
}

function bool_(x) {
  return bool$prime(Js_json.classify(raiseIfNone(x)));
}

function nullableString$prime(x) {
  if (typeof x === "number") {
    if (x === /* JSONNull */2) {
      return null;
    } else {
      throw [
            UnexpectedJSONValue,
            x
          ];
    }
  } else if (x.tag) {
    throw [
          UnexpectedJSONValue,
          x
        ];
  } else {
    return x[0];
  }
}

function nullableString(param) {
  if (param !== undefined) {
    return nullableString$prime(Js_json.classify(Caml_option.valFromOption(param)));
  } else {
    return null;
  }
}

function getStatus(path) {
  return $$Node.ChildProcess.exec("esy status", {
                cwd: path
              }).then((function (param) {
                var statusErrorString = param[1];
                if (statusErrorString === "") {
                  try {
                    var json = JSON.parse(param[0]);
                    var x = Js_json.classify(json);
                    var dict;
                    if (typeof x === "number") {
                      throw [
                            UnexpectedJSONValue,
                            x
                          ];
                    } else if (x.tag === /* JSONObject */2) {
                      dict = x[0];
                    } else {
                      throw [
                            UnexpectedJSONValue,
                            x
                          ];
                    }
                    var x$1 = Js_dict.get(dict, "isProject");
                    var isProject = bool$prime(Js_json.classify(raiseIfNone(x$1)));
                    var x$2 = Js_dict.get(dict, "isProjectSolved");
                    var isProjectSolved = bool$prime(Js_json.classify(raiseIfNone(x$2)));
                    var x$3 = Js_dict.get(dict, "isProjectFetched");
                    var isProjectFetched = bool$prime(Js_json.classify(raiseIfNone(x$3)));
                    var x$4 = Js_dict.get(dict, "isProjectReadyForDev");
                    var isProjectReadyForDev = bool$prime(Js_json.classify(raiseIfNone(x$4)));
                    var rootBuildPath = nullableString(Js_dict.get(dict, "rootBuildPath"));
                    var rootInstallPath = nullableString(Js_dict.get(dict, "rootInstallPath"));
                    var rootPackageConfigPath = nullableString(Js_dict.get(dict, "rootPackageConfigPath"));
                    return Promise.resolve({
                                isProject: isProject,
                                isProjectSolved: isProjectSolved,
                                isProjectFetched: isProjectFetched,
                                isProjectReadyForDev: isProjectReadyForDev,
                                rootBuildPath: rootBuildPath,
                                rootInstallPath: rootInstallPath,
                                rootPackageConfigPath: rootPackageConfigPath
                              });
                  }
                  catch (raw_x){
                    var x$5 = Caml_js_exceptions.internalToOCamlException(raw_x);
                    if (x$5[0] === UnexpectedJSONValue) {
                      return Promise.reject(x$5);
                    } else if (x$5[0] === Js_exn.$$Error) {
                      var match = x$5[1].message;
                      if (match !== undefined) {
                        return Promise.reject([
                                    JSError,
                                    "Error: " + (String(match) + "")
                                  ]);
                      } else {
                        return Promise.reject([
                                    UnknownError,
                                    "An unknown error occurred"
                                  ]);
                      }
                    } else {
                      throw x$5;
                    }
                  }
                } else {
                  return Promise.reject([
                              Stderr,
                              statusErrorString
                            ]);
                }
              }));
}

exports.UnexpectedJSONValue = UnexpectedJSONValue;
exports.Stderr = Stderr;
exports.UnknownError = UnknownError;
exports.JSError = JSError;
exports.bool$prime = bool$prime;
exports.raiseIfNone = raiseIfNone;
exports.bool_ = bool_;
exports.nullableString$prime = nullableString$prime;
exports.nullableString = nullableString;
exports.getStatus = getStatus;
/* Node Not a pure module */
