// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Esy = require("./Esy.bs.js");
var $$Node = require("./bindings/Node.bs.js");
var Path = require("path");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Vscode = require("vscode");
var $$Request = require("request");
var ProjectType = require("./ProjectType.bs.js");
var AzurePipelines = require("./AzurePipelines.bs.js");
var RequestProgress = require("request-progress");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function download(url, file, progress, end_, error, data) {
  var stream = RequestProgress($$Request(url));
  $$Node.RequestProgress.onProgress(stream, (function (state) {
          return Curry._1(progress, state.size.transferred / (134 * 1024 * 1024));
        }));
  $$Node.RequestProgress.onData(stream, data);
  $$Node.RequestProgress.onEnd(stream, end_);
  $$Node.RequestProgress.onError(stream, error);
  stream.pipe(Fs.createWriteStream(file));
  return /* () */0;
}

function make(folder) {
  process.env["OCAMLRUNPARAM"] = "b";
  process.env["MERLIN_LOG"] = "-";
  return ProjectType.detect(folder).then((function (projectType) {
                var setupPromise;
                setupPromise = typeof projectType === "number" ? Promise.resolve(/* () */0) : (
                    projectType.tag ? (
                        projectType[/* readyForDev */0] ? Promise.resolve(/* () */0) : Esy.setup(Path.join(folder, "package.json")).then((function (param) {
                                  return Vscode.window.withProgress({
                                              location: 15,
                                              title: "Setting up toolchain..."
                                            }, (function (progress) {
                                                progress.report({
                                                      increment: 10
                                                    });
                                                var hiddenEsyRoot = Path.join(folder, ".vscode", "esy");
                                                return $$Node.ChildProcess.exec("esy i -P " + hiddenEsyRoot, {
                                                                      cwd: folder
                                                                    }).then((function (param) {
                                                                      progress.report({
                                                                            increment: 10
                                                                          });
                                                                      return AzurePipelines.getBuildID(/* () */0).then(AzurePipelines.getDownloadURL).then((function (r) {
                                                                                    if (r.tag) {
                                                                                      return Promise.resolve(/* Error */Block.__(1, [r[0]]));
                                                                                    } else {
                                                                                      var downloadUrl = r[0];
                                                                                      console.log("download", downloadUrl);
                                                                                      var lastProgress = {
                                                                                        contents: 0
                                                                                      };
                                                                                      return new Promise((function (resolve, param) {
                                                                                                    return download(downloadUrl, Path.join(hiddenEsyRoot, "cache.zip"), (function (progressFraction) {
                                                                                                                  var percent = progressFraction * 80.0 | 0;
                                                                                                                  progress.report({
                                                                                                                        increment: percent - lastProgress.contents | 0
                                                                                                                      });
                                                                                                                  lastProgress.contents = percent;
                                                                                                                  return /* () */0;
                                                                                                                }), (function (param) {
                                                                                                                  return resolve(/* Ok */Block.__(0, [/* () */0]));
                                                                                                                }), (function (e) {
                                                                                                                  return resolve(/* Error */Block.__(1, ["Failed to download " + (String(downloadUrl) + " ")]));
                                                                                                                }), (function (param) {
                                                                                                                  return /* () */0;
                                                                                                                }));
                                                                                                  }));
                                                                                    }
                                                                                  }));
                                                                    })).then((function (_result) {
                                                                    return $$Node.ChildProcess.exec("unzip cache.zip", {
                                                                                cwd: hiddenEsyRoot
                                                                              });
                                                                  })).then((function (param) {
                                                                  return $$Node.ChildProcess.exec("esy import-dependencies -P " + hiddenEsyRoot, {
                                                                              cwd: hiddenEsyRoot
                                                                            });
                                                                })).then((function (param) {
                                                                return $$Node.ChildProcess.exec("esy build -P " + hiddenEsyRoot, {
                                                                            cwd: hiddenEsyRoot
                                                                          });
                                                              })).then((function (param) {
                                                              return Promise.resolve(/* () */0);
                                                            }));
                                              }));
                                }))
                      ) : (
                        projectType[/* readyForDev */0] ? Promise.resolve(/* () */0) : Vscode.window.withProgress({
                                location: 15,
                                title: "Setting up toolchain..."
                              }, (function (progress) {
                                  progress.report({
                                        increment: 10
                                      });
                                  return $$Node.ChildProcess.exec("esy", {
                                                cwd: folder
                                              }).then((function (param) {
                                                console.log("Finished running esy");
                                                return Promise.resolve(/* () */0);
                                              }));
                                }))
                      )
                  );
                return setupPromise.then((function (param) {
                              if (typeof projectType === "number") {
                                if (process.platform === "win32") {
                                  return Promise.reject([
                                              Caml_builtin_exceptions.failure,
                                              "Opam workflow for Windows is not supported yet"
                                            ]);
                                } else {
                                  return Promise.resolve({
                                              command: "opam",
                                              args: /* array */[
                                                "exec",
                                                "ocamllsp"
                                              ],
                                              options: {
                                                env: process.env
                                              }
                                            });
                                }
                              } else if (projectType.tag) {
                                var match = process.platform === "win32";
                                return Promise.resolve({
                                            command: match ? "esy.cmd" : "esy",
                                            args: /* array */[
                                              "-P",
                                              Path.join(folder, ".vscode", "esy"),
                                              "ocamllsp"
                                            ],
                                            options: {
                                              env: process.env
                                            }
                                          });
                              } else {
                                var match$1 = process.platform === "win32";
                                return Promise.resolve({
                                            command: match$1 ? "esy.cmd" : "esy",
                                            args: /* array */[
                                              "exec-command",
                                              "--include-current-env",
                                              "ocamllsp"
                                            ],
                                            options: {
                                              env: process.env
                                            }
                                          });
                              }
                            }));
              }));
}

var Server = {
  make: make
};

function make$1(param) {
  return {
          documentSelector: /* array */[
            {
              scheme: "file",
              language: "ocaml"
            },
            {
              scheme: "file",
              language: "reason"
            }
          ]
        };
}

var Client = {
  make: make$1
};

var LanguageClient = { };

exports.download = download;
exports.Server = Server;
exports.Client = Client;
exports.LanguageClient = LanguageClient;
/* fs Not a pure module */
