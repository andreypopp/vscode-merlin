// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Path = require("path");
var Block = require("bs-platform/lib/js/block.js");
var Setup = require("./Setup.bs.js");
var ProjectType = require("./ProjectType.bs.js");

function make(folder) {
  process.env["OCAMLRUNPARAM"] = "b";
  process.env["MERLIN_LOG"] = "-";
  return ProjectType.detect(folder).then((function (projectType) {
                var setupPromise;
                setupPromise = typeof projectType === "number" ? Promise.resolve(/* Ok */Block.__(0, [/* () */0])) : (
                    projectType.tag ? (
                        projectType[/* readyForDev */0] ? Promise.resolve(/* Ok */Block.__(0, [/* () */0])) : Setup.Bsb.run(folder)
                      ) : (
                        projectType[/* readyForDev */0] ? Promise.resolve(/* Ok */Block.__(0, [/* () */0])) : Setup.Esy.run(folder)
                      )
                  );
                return setupPromise.then((function (r) {
                              if (r.tag) {
                                return Promise.resolve(/* Error */Block.__(1, [r[0]]));
                              } else if (typeof projectType === "number") {
                                if (process.platform === "win32") {
                                  return Promise.resolve(/* Error */Block.__(1, ["Opam workflow for Windows is not supported yet"]));
                                } else {
                                  return Promise.resolve(/* Ok */Block.__(0, [{
                                                  command: "opam",
                                                  args: /* array */[
                                                    "exec",
                                                    "ocamllsp"
                                                  ],
                                                  options: {
                                                    env: process.env
                                                  }
                                                }]));
                                }
                              } else if (projectType.tag) {
                                var match = process.platform === "win32";
                                return Promise.resolve(/* Ok */Block.__(0, [{
                                                command: match ? "esy.cmd" : "esy",
                                                args: /* array */[
                                                  "-P",
                                                  Path.join(folder, ".vscode", "esy"),
                                                  "ocamllsp"
                                                ],
                                                options: {
                                                  env: process.env
                                                }
                                              }]));
                              } else {
                                var match$1 = process.platform === "win32";
                                return Promise.resolve(/* Ok */Block.__(0, [{
                                                command: match$1 ? "esy.cmd" : "esy",
                                                args: /* array */[
                                                  "exec-command",
                                                  "--include-current-env",
                                                  "ocamllsp"
                                                ],
                                                options: {
                                                  env: process.env
                                                }
                                              }]));
                              }
                            }));
              }));
}

var Server = {
  make: make
};

function make$1(param) {
  return {
          documentSelector: /* array */[
            {
              scheme: "file",
              language: "ocaml"
            },
            {
              scheme: "file",
              language: "reason"
            }
          ]
        };
}

var Client = {
  make: make$1
};

var LanguageClient = { };

exports.Server = Server;
exports.Client = Client;
exports.LanguageClient = LanguageClient;
/* path Not a pure module */
