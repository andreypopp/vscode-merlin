// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Esy = require("./Esy.bs.js");
var $$Node = require("./bindings/Node.bs.js");
var Path = require("path");
var Block = require("bs-platform/lib/js/block.js");
var Utils = require("./Utils.bs.js");
var Vscode = require("vscode");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function detect(folder) {
  return Esy.getStatus(folder).then((function (status) {
                if (status.isProject) {
                  var match = status.rootPackageConfigPath;
                  var manifestFile = (match == null) ? "" : match;
                  if (new RegExp(".json$").test(manifestFile)) {
                    if (status.isProjectReadyForDev) {
                      return Promise.resolve(/* Esy */Block.__(0, [/* readyForDev */true]));
                    } else {
                      return $$Node.Fs.readFile(manifestFile).then((function (manifest) {
                                    var manifestJson = JSON.parse(manifest);
                                    var manifestHasEsyConfig = Utils.propertyExists(manifestJson, "esy");
                                    var manifestIsEsyJSON = new RegExp("esy.json$").test(manifestFile);
                                    if (manifestIsEsyJSON || manifestHasEsyConfig) {
                                      return Promise.resolve(/* Esy */Block.__(0, [/* readyForDev */status.isProjectReadyForDev]));
                                    } else {
                                      var esyToolChainFolder = Path.join(folder, ".vscode", "esy");
                                      return $$Node.Fs.exists(esyToolChainFolder).then((function (doesToolChainEsyManifestExist) {
                                                    if (doesToolChainEsyManifestExist) {
                                                      return Esy.getStatus(esyToolChainFolder).then((function (toolChainStatus) {
                                                                    if (toolChainStatus.isProject) {
                                                                      return Promise.resolve(/* Bsb */Block.__(1, [/* readyForDev */toolChainStatus.isProjectSolved]));
                                                                    } else {
                                                                      return Promise.reject([
                                                                                  Caml_builtin_exceptions.failure,
                                                                                  "Weird invariant violation. Why would .vscode/esy exist but not be a valid esy project. TODO"
                                                                                ]);
                                                                    }
                                                                  }));
                                                    } else {
                                                      return Promise.resolve(/* Bsb */Block.__(1, [/* readyForDev */false]));
                                                    }
                                                  }));
                                    }
                                  }));
                    }
                  } else {
                    return Promise.resolve(/* Opam */0);
                  }
                } else {
                  return Promise.reject([
                              Caml_builtin_exceptions.failure,
                              "Not a valid esy/opam/bsb project"
                            ]);
                }
              }));
}

var ProjectType = {
  detect: detect
};

function make(folder) {
  process.env["OCAMLRUNPARAM"] = "b";
  process.env["MERLIN_LOG"] = "-";
  return detect(folder).then((function (projectType) {
                var setupPromise;
                setupPromise = typeof projectType === "number" ? Promise.resolve(/* () */0) : (
                    projectType.tag ? (
                        projectType[/* readyForDev */0] ? Promise.resolve(/* () */0) : Esy.setup(Path.join(folder, "package.json")).then((function (param) {
                                  return Vscode.window.withProgress({
                                              location: 15,
                                              title: "Setting up toolchain..."
                                            }, (function (progress) {
                                                progress.report({
                                                      increment: 10
                                                    });
                                                return $$Node.ChildProcess.exec("esy -P " + Path.join(folder, ".vscode", "esy"), {
                                                              cwd: folder
                                                            }).then((function (param) {
                                                              console.log("Finished running esy");
                                                              return Promise.resolve(/* () */0);
                                                            }));
                                              }));
                                }))
                      ) : (
                        projectType[/* readyForDev */0] ? Promise.resolve(/* () */0) : Vscode.window.withProgress({
                                location: 15,
                                title: "Setting up toolchain..."
                              }, (function (progress) {
                                  progress.report({
                                        increment: 10
                                      });
                                  return $$Node.ChildProcess.exec("esy", {
                                                cwd: folder
                                              }).then((function (param) {
                                                console.log("Finished running esy");
                                                return Promise.resolve(/* () */0);
                                              }));
                                }))
                      )
                  );
                return setupPromise.then((function (param) {
                              if (typeof projectType === "number") {
                                if (process.platform === "win32") {
                                  return Promise.reject([
                                              Caml_builtin_exceptions.failure,
                                              "Opam workflow for Windows is not supported yet"
                                            ]);
                                } else {
                                  return Promise.resolve({
                                              command: "opam",
                                              args: /* array */[
                                                "exec",
                                                "ocamllsp"
                                              ],
                                              options: {
                                                env: process.env
                                              }
                                            });
                                }
                              } else if (projectType.tag) {
                                var match = process.platform === "win32";
                                return Promise.resolve({
                                            command: match ? "esy.cmd" : "esy",
                                            args: /* array */[
                                              "-P",
                                              Path.join(folder, ".vscode", "esy"),
                                              "ocamllsp"
                                            ],
                                            options: {
                                              env: process.env
                                            }
                                          });
                              } else {
                                var match$1 = process.platform === "win32";
                                return Promise.resolve({
                                            command: match$1 ? "esy.cmd" : "esy",
                                            args: /* array */[
                                              "exec-command",
                                              "--include-current-env",
                                              "ocamllsp"
                                            ],
                                            options: {
                                              env: process.env
                                            }
                                          });
                              }
                            }));
              }));
}

var Server = {
  make: make
};

function make$1(param) {
  return {
          documentSelector: /* array */[
            {
              scheme: "file",
              language: "ocaml"
            },
            {
              scheme: "file",
              language: "reason"
            }
          ]
        };
}

var Client = {
  make: make$1
};

var LanguageClient = { };

exports.ProjectType = ProjectType;
exports.Server = Server;
exports.Client = Client;
exports.LanguageClient = LanguageClient;
/* Esy Not a pure module */
