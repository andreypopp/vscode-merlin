# Steps for restoring opam cache

steps:
  - bash: 'mkdir -p $(Build.StagingDirectory)'
    condition: and(eq(variables['Build.Reason'], 'PullRequest'), and(succeeded(), ne(variables['Build.SourceBranch'], variables['System.PullRequest.TargetBranch'])))
    displayName: '[Cache][Publish] Create opam cache directory'

  # TODO: This can be done in parallel with installing node, and esy
  # (which would save a bunch of time on windows)
  - task: Cache@2
    condition: and(eq(variables['Build.Reason'], 'PullRequest'), and(succeeded(), ne(variables['Build.SourceBranch'], variables['System.PullRequest.TargetBranch'])))
    displayName: '[Cache][Restore] Restoring opam'
    inputs:
      keys: 'vPrimary | opam | "$(Agent.OS)"' # vPrimary, here, is just a way to bust cache during debugging. Inspired from https://docs.microsoft.com/en-us/azure/devops/pipelines/caching/?view=azure-devops#can-i-clear-a-cache" 
      path: $(Pipeline.Workspace)/.opam
      cacheHitVar: CACHE_RESTORED
    displayName:  Cache opam switch
      